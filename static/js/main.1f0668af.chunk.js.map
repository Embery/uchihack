{"version":3,"sources":["utils/Connection.js","views/HomeScreen.js","views/Login.js","views/Answers.js","views/QuestionPage.js","views/QuestionsToolbar.js","views/QuestionsScreen.js","views/Registration.js","views/EditProfile.js","stores/SelectedPage.js","stores/Questions.js","stores/Answers.js","stores/User.js","utils/Tree.js","stores/Categories.js","stores/Registry.js","views/Header.js","views/App.js","reportWebVitals.js","index.js"],"names":["Connection","self","socket","init","getSession","document","cookie","split","find","elem","startsWith","setSession","session","length","cookie_date","Date","setTime","getTime","toGMTString","request","config","responseConfig","type","resultConfig","Object","assign","httpRequest","timeout","wsRequest","configCopy","url","fetch","method","body","JSON","stringify","message","data","needResponse","responseMessage","wsSend","waitEvent","response","Error","emit","on","callback","Promise","resolve","reject","cb","setTimeout","off","HomeScreen","props","Login","registry","useContext","RegistryCtx","user","getStore","page","onFinish","values","a","actions","login","username","password","setSelected","ReactDOM","render","getElementById","description","closable","name","className","Item","rules","required","prefix","UserOutlined","placeholder","LockOutlined","htmlType","Answers","observer","answers","record","isLoaded","isLoading","getAnswers","map","author","user_name","user_surname","content","datetime","title","moment","created","format","fromNow","id","TextArea","Input","QuestionPage","userInfo","questions","isMine","user_id","question","addFilter","Form","useForm","form","answer","categoriesStore","categories","getCategories","setFieldsValue","copy","updated","removeEmptyDates","formSuccess","createQuestion","result","getQuestions","disabled","style","padding","labelCol","span","wrapperCol","label","width","dropdownStyle","maxHeight","overflow","treeData","treeDefaultExpandAll","marginBottom","display","lineHeight","textAlign","rows","status_name","offset","onClick","getFieldsValue","setQuestionAnswered","setQuestionClosed","question_id","createAnswer","Panel","Collapse","QuestionsToolbar","store","header","keys","forEach","key","removeFilter","similar","valuePropName","margin","resetFields","submit","QuestionsScreen","questionsStore","total","useState","setPage","uid","columns","dataIndex","value","toLocaleString","dataSource","size","rowKey","loading","onRow","event","pagination","position","defaultPageSize","showSizeChanger","onChange","footer","Registration","connection","confirm","params","json","scrollToFirstError","tooltip","whitespace","hasFeedback","Password","dependencies","getFieldValue","validator","_","Profile","SelectedPage","items","home","register","profileEdit","action","selected","setSelectedPageItem","selectedPageItem","extendObservable","Questions","filters","currentPage","pageSize","property","setTotal","setMessages","setLoading","setIsLoaded","exact","requestConfig","limit","responseObject","success","messages","setQuestion","setAnswers","User","nickname","isLoggedIn","setUserData","setAvatar","avatar","setUserId","setNickname","info","setIsLoggedIn","error_message","session_id","logout","treefiy","dataArray","parentId","byIdMap","parent","children","push","Categories","setCategories","React","createContext","SubMenu","Menu","Header","pageStore","menuItems","src","alt","maxWidth","profile","elems","e","selectedKeys","mode","top","initialized","storeName","stores","selectedPage","Registry","App","selectedPageStore","Provider","Consumer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","console","log"],"mappings":"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","file":"static/js/main.1f0668af.chunk.js","sourcesContent":["import { io } from 'socket.io-client';\n\nfunction Connection(){\n    const self = {\n        socket: null,\n        init() {\n            // TODO: вставить real url или переправить с сокетио на нативщину или на что-то еще\n            //self.socket = io('http://localhost:3001');\n            return self;\n        },\n        /**\n         * Если я допустила любой инжект чужого js-кода - у меня уже все плохо,\n         * поэтому я не буду паранойить по поводу того, что сессия в ЛС хранится\n         */\n        getSession(){\n            const cookies = document.cookie.split(';');\n            return cookies.find(elem=>elem.startsWith(\"session_id\"))\n        },\n        setSession(session){\n            if(session.length){\n                document.cookie = \"session_id=\" + session;\n            } else {\n                const cookie_date = new Date ( );  // Текущая дата и время\n                cookie_date.setTime ( cookie_date.getTime() - 1 );\n                document.cookie = \"session_id\" + \"=; expires=\" + cookie_date.toGMTString();\n            }\n        },\n        /**\n         * @param {object} config\n         * @param {object} responseConfig\n         * @param {boolean} responseConfig.needResponse\n         * @param {string} responseConfig.responseMessage\n         * @param {number} responseConfig.timeout\n         */\n        async request(config, responseConfig = {}){\n            const type = config.type || \"http\";\n            const resultConfig = Object.assign({}, config, {session: self.getSession()});\n            if(type === \"http\"){\n                return self.httpRequest(resultConfig, responseConfig.timeout);\n            } else {\n                return self.wsRequest(resultConfig, responseConfig);\n            }\n        },\n        async httpRequest(config, timeout){\n            const configCopy = Object.assign({}, config);\n            delete configCopy.url;\n            return fetch(config.url, {method:'POST', body:JSON.stringify(configCopy||'')});\n        },\n        async wsRequest(config, responseConfig){\n            const {message, data} = config;\n            const {\n                needResponse, \n                responseMessage, \n                timeout\n            } = responseConfig;\n            self.wsSend(message, data);\n            if(needResponse){\n                const response = await this.waitEvent(responseMessage, timeout);\n                return response;\n            }\n            return true;\n        },\n        wsSend(message, data){\n            if(!self.socket) throw new Error('Request sent before initialization finished!')\n            self.socket.emit(message, data);\n        },\n        on(message, callback){\n            self.socket.on(message, callback);\n        },\n        async waitEvent(message, timeout = 15000) {\n            return new Promise((resolve, reject) => {\n                const cb = (data) => {\n                    resolve(data);\n                }\n                self.socket.on(message, cb);\n                setTimeout(() => {\n                    self.socket.off(message, cb);\n                    reject(\"Time limit exceeded\");\n                }, timeout);\n            })\n        }\n    };\n    return self;\n}\n\nexport default Connection;","const HomeScreen = (props) => {\n    return (\n        <article>\n            <h2>\n                Привет, друг!\n            </h2>\n            <p>\n                Ты оказался на платформе, где можешь помочь другим или сам получить помощь по каким-либо вопросам по предметам школьной программы.\n            </p>\n            <p>\n                Чем большему количеству людей ты поможешь, тем больше у тебя будет баллов и тем выше ты будешь в общем рейтинге\n            </p>\n            <p>\n                С другой стороны, ты можешь помочь другим почувствовать свою важность и нужность, помечая самый крутой ответ и распределяя баллы за вопрос (подробнее будет в путеводителе)\n            </p>\n            <p>\n                Мы надеемся, ты получишь удовольствие от путешествия по системе МВО #25\n            </p>\n            <p>\n                Команда МВО\n            </p>\n        </article>\n    )\n}\n\nexport default HomeScreen;","import { Form, Input, Button, Alert} from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport React, {useContext} from 'react';\nimport ReactDOM from 'react-dom';\nimport { RegistryCtx } from '../stores/Registry';\n\nconst Login = () => {\n    const registry = useContext(RegistryCtx);\n    const user = registry.getStore('user');\n    const page = registry.getStore('selectedPage')\n    const onFinish = async (values) => {\n        try{\n            await user.actions.login(values.username, values.password);\n            page.actions.setSelected('questions');\n            ReactDOM.render(\n                null, \n                document.getElementById('notification')\n            );\n        } \n        catch(e) {\n            ReactDOM.render(\n                <Alert\n                    message=\"Упс :(\"\n                    description={e.message}\n                    type=\"error\"\n                    closable\n                />, \n                document.getElementById('notification')\n            );\n        }\n    };\n\n    return (\n        <Form\n            name=\"normal_login\"\n            className=\"login-form\"\n            onFinish={onFinish}\n        >\n            <Form.Item\n                name=\"username\"\n                rules={[{ required: true, message: 'Введите логин!' }]}\n            >\n                <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Логин\" />\n            </Form.Item>\n            <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Введите пароль!' }]}\n            >\n                <Input\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                type=\"password\"\n                placeholder=\"Пароль\"\n                />\n            </Form.Item>\n\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                    Войти\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default Login;","import { \n    Comment, Tooltip\n} from 'antd';\nimport { observer } from \"mobx-react\";\nimport moment from 'moment';\nimport React from 'react';\n\nconst Answers = observer((props) => {\n    const {answers, record} = props;\n    if(record && !answers.isLoaded && !answers.isLoading) {\n        answers.actions.getAnswers();\n    }\n    return (\n        answers.answers.map(elem => {\n            return(\n                <Comment\n                    author={<b>{`${elem.user_name} ${elem.user_surname}`}</b>}\n                    content={\n                        <p>\n                        {elem.body}\n                        </p>\n                    }\n                    key={elem.id}\n                    datetime={\n                        <Tooltip title={moment(elem.created).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(elem.created).fromNow()}</span>\n                        </Tooltip>\n                    }\n                />\n            )\n        })\n    )\n})\n\nexport default Answers","import { \n    DatePicker, Form, Input, TreeSelect, Button, Comment, Tooltip\n} from 'antd';\nimport moment from 'moment';\nimport { observer } from \"mobx-react\";\nimport Answers from './Answers';\nimport React, {useContext} from 'react';\nimport { RegistryCtx } from \"../stores/Registry\";\n\nconst { TextArea } = Input;\n\nconst removeEmptyDates = (record) => {\n    const copy = Object.assign({}, record);\n    if(!copy.created) delete copy.created;\n    else copy.created = moment(copy.created);\n    if(!copy.updated) delete copy.updated;\n    else copy.updated = moment(copy.updated);\n    return copy;\n}\nconst QuestionPage = observer((props) => {\n    const {record} = props;\n    const registry = useContext(RegistryCtx);\n    const userInfo = registry.getStore('user');\n    const questions = registry.getStore('questions');\n    const answers = registry.getStore('answers');\n\n    const isMine = !record || (record.user_id === userInfo.user_id);\n    if(record && record.id !== answers.question) {\n        answers.addFilter('question_id', record.id)\n    }\n    const [form] = Form.useForm();\n    const [answer] = Form.useForm();\n\n    const categoriesStore = registry.getStore('categories');\n    const {isLoaded, isLoading, categories} = categoriesStore;\n    const {getCategories} = categoriesStore.actions;\n    if(!isLoaded && !isLoading) getCategories();\n\n    form.setFieldsValue(removeEmptyDates(record));\n\n    const formSuccess = async (values) => {\n        const copy = Object.assign({}, values);\n        copy.user_id = userInfo.user_id;\n        const result = await questions.actions.createQuestion(copy);\n        questions.actions.getQuestions();\n        form.setFieldsValue(result[0])\n    }\n    return (\n        <div>\n        <fieldset disabled={!isMine}>\n            <Form \n                form={form} \n                name=\"questions\" \n                style={{padding: '1em'}}\n                onFinish={values => formSuccess(values)}\n                labelCol={{\n                    span: 2,\n                }}\n                wrapperCol={{\n                    span: 18,\n                }}\n            >\n                {(() => {\n                    if(record) return (\n                    <Form.Item label=\"Автор\">\n                        <span>\n                            {`${record.user_name || ''} ${record.user_surname || ''}`}\n                        </span>\n                    </Form.Item>)\n                })()}\n                <Form.Item name=\"name\" label=\"Название\" rules={[{ required: true }]}>\n                    <Input/>\n                </Form.Item>\n                <Form.Item name=\"category_id\" label=\"Тема\">\n                    <TreeSelect\n                        style={{ width: '100%' }}\n                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                        treeData={categories}\n                        placeholder=\"Тема\"\n                        treeDefaultExpandAll\n                        disabled={!isMine}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Создан\" style={{ marginBottom: 0 }}>\n                    <Form.Item\n                        style={{ display: 'inline-block', width: 'calc(50% - 40px)' }}\n                        name=\"created\"\n                    >\n                        <DatePicker disabled/>\n                    </Form.Item>\n                    <span\n                        style={{ display: 'inline-block', width: '70px', lineHeight: '32px', textAlign: 'center' }}\n                    >\n                        Изменен: \n                    </span>\n                    <Form.Item \n                        style={{ display: 'inline-block', width: 'calc(50% - 40px)' }}\n                        name=\"updated\"\n                    >\n                        <DatePicker disabled/>\n                    </Form.Item>\n                </Form.Item>\n                <Form.Item name=\"body\" label=\"Вопрос\" rules={[{ required: true }]}>\n                    <TextArea rows={10}/>\n                </Form.Item>\n                {\n                    (()=>{\n                        if(!record) return (\n                            <Form.Item wrapperCol={{ offset: 2, span: 18 }} className=\"question-form-footer-container\">\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"question-form-button\">\n                                Задать вопрос\n                            </Button>\n                            </Form.Item>\n                        )\n                        if(isMine && record.status_name === 'Новый') return (\n                            <Form.Item wrapperCol={{ offset: 2, span: 18 }} className=\"question-form-footer-container\">\n                            <div>\n                                <Button type=\"primary\" className=\"question-form-button\"\n                                    onClick={async ()=>{\n                                        const values = form.getFieldsValue();\n                                        values.id = record.id;\n                                        const result = await questions.actions.setQuestionAnswered(values);\n                                        questions.actions.getQuestions();\n                                        form.setFieldsValue(result[0])\n                                    }}\n                                >\n                                    Пометить отвеченным\n                                </Button>\n                                <Button className=\"question-form-button\"\n                                    onClick={async ()=>{\n                                        const values = form.getFieldsValue();\n                                        values.id = record.id;\n                                        const result = await questions.actions.setQuestionClosed(values);\n                                        questions.actions.getQuestions();\n                                        form.setFieldsValue(result[0])\n                                    }}\n                                >\n                                    Закрыть вопрос\n                                </Button>\n                            </div>\n                            </Form.Item>\n                        )\n                    })()\n                }\n            </Form>\n        </fieldset>\n        {(()=>{\n            if(record) return(\n                <Form \n                    style={{padding: '1em'}}\n                    labelCol={{\n                        span: 2,\n                    }}\n                    wrapperCol={{\n                        span: 18,\n                    }}\n                >\n                    <Form.Item label=\"Ответы\">\n                        <Answers record={record} answers={answers}/>\n                    </Form.Item>\n                </Form>\n            );\n        })()}\n        {(()=>{\n            if(record && userInfo.user_id){\n                return (\n                    <Form\n                        form={answer}\n                        style={{padding: '1em'}}\n                        labelCol={{\n                            span: 2,\n                        }}\n                        wrapperCol={{\n                            span: 18,\n                        }}\n                    >\n                        <Form.Item name=\"body\" label=\"Ответ\">\n                            <TextArea rows={5} />\n                        </Form.Item>\n                        <Form.Item>\n                            <Button type=\"primary\" className=\"question-form-button\"\n                                onClick={async ()=>{\n                                    const values = answer.getFieldsValue();\n                                    values.question_id = record.id;\n                                    values.user_id = userInfo.user_id;\n                                    const result = await answers.actions.createAnswer(values);\n                                    await answers.actions.getAnswers();\n                                }}\n                            >Ответить</Button>\n                        </Form.Item>\n                    </Form>\n                )\n            }\n        })()}\n        </div>\n   );\n});\n\nexport default QuestionPage;","import React from 'react';\nimport { observer } from \"mobx-react\";\nimport { Form, Row, Col, Input, Button, DatePicker, TreeSelect, Checkbox, Collapse } from 'antd';\n\n\nconst {Panel} = Collapse;\nconst QuestionsToolbar = observer((props) => {\n    const {store, categoriesStore} = props;\n    const [form] = Form.useForm();\n    const {isLoaded, isLoading, categories} = categoriesStore;\n    const {getCategories} = categoriesStore.actions;\n    if(!isLoaded && !isLoading) getCategories();\n    const formSuccess = (values, store) => {\n        Object.keys(values).forEach(key=>{\n            if(key!==\"similar\") {\n                if(values[key]) store.addFilter(key, values[key]);\n                else store.removeFilter(key);\n            }\n        });\n        if(!values.similar){\n            store.actions.getQuestions();\n        }\n        else {\n            //TODO - хранить страницу и pageSize в сторе чтобы вот этой дичи не было\n            store.actions.getQuestions(1, 25, false);\n        }\n    }\n    return (\n        <Collapse>\n            <Panel header=\"Фильтры\">\n                <Form\n                    form={form}\n                    name=\"filters\"\n                    className=\"ant-advanced-search-form\"\n                    onFinish={values => formSuccess(values, store)}\n                    >\n                        <Form.Item name=\"id\" label=\"Номер\">\n                            <Input placeholder=\"№\" />\n                        </Form.Item>\n                        <Form.Item name=\"name\" label=\"Вопрос\">\n                            <Input placeholder=\"Вопрос\" />\n                        </Form.Item>\n                        <Form.Item name=\"similar\" valuePropName=\"checked\">\n                            <Checkbox >Похожие</Checkbox>\n                        </Form.Item>\n                        <Form.Item>\n                            <Row>\n                                <Col>\n                                    <Form.Item name=\"created_gt\" label=\"Создан\">\n                                        <DatePicker placeholder=\"Начало\" />\n                                    </Form.Item>\n                                </Col>\n                                <Col style={{margin:\"0 0 0 1em\"}}>\n                                    <Form.Item name=\"created_lt\">\n                                        <DatePicker placeholder=\"Конец\" />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        </Form.Item>\n                        <Form.Item>\n                            <Row>\n                                <Col>\n                                    <Form.Item name=\"updated_gt\" label=\"Обновлен\">\n                                        <DatePicker placeholder=\"Начало\" />\n                                    </Form.Item>\n                                </Col>\n                                <Col style={{margin:\"0 0 0 1em\"}}>\n                                    <Form.Item name=\"updated_lt\">\n                                        <DatePicker placeholder=\"Конец\" />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        </Form.Item>\n                        <Form.Item name=\"category_id\" label=\"Тема\">\n                            <TreeSelect\n                                style={{ width: '100%' }}\n                                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                treeData={categories}\n                                placeholder=\"Тема\"\n                                treeDefaultExpandAll\n                            />\n                        </Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Искать\n                        </Button>\n                        <Button\n                            style={{ margin: '0 8px' }}\n                            onClick={() => {\n                            form.resetFields();\n                            form.submit();\n                            }}\n                        >\n                            Очистить фильтры\n                        </Button>\n                </Form>\n            </Panel>\n        </Collapse>\n    );\n});\nexport default QuestionsToolbar;","import { Table, Button} from 'antd';\nimport QuestionsToolbar from './QuestionsToolbar';\nimport { observer } from \"mobx-react\";\nimport React, {useContext, useState} from 'react';\nimport { RegistryCtx } from \"../stores/Registry\";\n\nconst QuestionsScreen = observer(props => {\n    const registry = useContext(RegistryCtx);\n    const questionsStore = registry.getStore('questions');\n    const categories = registry.getStore('categories');\n    const {questions, total, isLoading, isLoaded} = questionsStore;\n    const [page, setPage] = useState(1);\n    const uid = registry.getStore('user').user_id;\n    const columns = [\n        {\n            title: '#',\n            dataIndex: 'id',\n        },\n        {\n            title: 'Название',\n            dataIndex: 'name',\n        },\n        {\n            title: 'Тема',\n            dataIndex: 'category_name'\n        },\n        {\n            title: 'Статус',\n            dataIndex: 'status_name',\n        },\n        {\n            title: 'Создан',\n            dataIndex: 'created',\n            render: value => {\n                if(!value) return '';\n                const date = new Date(value);\n                return date.toLocaleString('ru');\n            }\n        },\n        {\n            title: 'Изменен',\n            dataIndex: 'updated',\n            render: value => {\n                if(!value) return '';\n                const date = new Date(value);\n                return date.toLocaleString('ru');\n            }\n        },\n        {\n            title: 'Баллы',\n            dataIndex: 'points'\n        },\n        {\n            title: \"Автор\",\n            dataIndex: \"user_name\",\n            render: (value, record) => {\n                return (value || '') + ' ' + (record.user_surname || '');\n            }\n        }\n    ];\n    const {getQuestions} = questionsStore.actions;\n    if(!isLoaded && !isLoading) getQuestions();\n    return (\n        <Table \n            dataSource={questions} \n            columns={columns}\n            size=\"middle\"\n            rowKey=\"id\" \n            loading={isLoading}\n            onRow={(record) => {\n                return {\n                    onClick: event => {\n                        registry.getStore('selectedPage').actions.setSelected('question', {record})\n                    }\n                }\n            }}\n            pagination={\n                {\n                    position: ['none', 'bottomCenter'],  \n                    defaultPageSize: 25, \n                    total,\n                    showSizeChanger:false,\n                    onChange: async (page, ...args) => {\n                        setPage(page);\n                        await questionsStore.actions.getQuestions(page);\n                    }\n                }\n            }\n            footer={() => \n                <Button onClick={async ()=>{\n                    await questionsStore.actions.getQuestions(page);\n                }}>\n                    Обновить\n                </Button>\n            }\n            title={() => <div>\n                <h2>Вопросы\n                {(()=>{\n                    if(uid){\n                        return (\n                            <Button type=\"primary\"\n                                style={{ margin: '0 16px' }}\n                                onClick={() => {\n                                    registry.getStore('selectedPage').actions.setSelected('question')\n                                }}\n                            >\n                                Добавить\n                            </Button>\n                        )\n                    }\n                })()}\n                </h2>\n                <QuestionsToolbar store={questionsStore} categoriesStore={categories} />\n            </div>}\n        />\n    );\n});\nexport default QuestionsScreen","import React, {useContext} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Form,\n  Input,\n  Button,\n  Alert,\n} from 'antd';\nimport { RegistryCtx } from '../stores/Registry';\n\nconst Registration = (props) => {\n    const registry = useContext(RegistryCtx);\n    const {connection} = registry;\n    const [form] = Form.useForm();\n\n    const onFinish = async (values) => {\n        const copy = Object.assign({}, values);\n        delete copy.confirm\n        try{\n            const response = await connection.request({\n                url: 'https://uchi-hack.herokuapp.com/user/create',\n                params: [copy]\n            });\n            const json = await response.json();\n            ReactDOM.render(\n                <Alert\n                    message=\"Успех!\"\n                    description=\"Регистрация прошла успешно\"\n                    type=\"success\"\n                    closable\n                />, \n                document.getElementById('notification')\n            );\n        }\n        catch (e){\n            ReactDOM.render(\n                <Alert\n                    message=\"Упс :(\"\n                    description=\"Что-то пошло не так\"\n                    type=\"error\"\n                    closable\n                />, \n                document.getElementById('notification')\n            );\n        }\n    };\n    const layout = {\n        labelCol: { span: 2 },\n        wrapperCol: { span: 18 },\n    };\n    const tailLayout = {\n        wrapperCol: { offset: 2, span: 18 },\n    };\n    return (\n        <Form\n            form={form}\n            name=\"register\"\n            onFinish={onFinish}\n            style={{padding: '1em'}}\n            {...layout}\n            scrollToFirstError\n        >\n            <Form.Item\n                name=\"login\"\n                label=\"Логин\"\n                tooltip=\"По которому вы будете заходить на сайт\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Логин не может быть пустым',\n                    whitespace: false,\n                },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"name\"\n                label=\"Имя\"\n                tooltip=\"Отображаемое на платформе\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Имя не может быть пустым',\n                    whitespace: false,\n                },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"surname\"\n                label=\"Фамилия\"\n                tooltip=\"Отображаемая на платформе\"\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"password\"\n                label=\"Пароль\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please input your password!',\n                },\n                ]}\n                hasFeedback\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                name=\"confirm\"\n                label=\"Повтор пароля\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                {\n                    required: true,\n                    message: 'Please confirm your password!',\n                },\n                ({ getFieldValue }) => ({\n                    validator(_, value) {\n                    if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                    }\n\n                    return Promise.reject(new Error('The two passwords that you entered do not match!'));\n                    },\n                }),\n                ]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"register-form-button\">\n                Зарегистрироваться\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default Registration;","import React from 'react';\nimport {\n  Form,\n  Input,\n} from 'antd';\n\nconst Profile = (props) => {\n    const {record} = props;\n    const [form] = Form.useForm();\n    const layout = {\n        labelCol: { span: 2 },\n        wrapperCol: { span: 18 },\n    };\n    form.setFieldsValue(record);\n    return (\n        <fieldset disabled>\n        <Form\n            form={form}\n            name=\"profile\"\n            style={{padding: '1em'}}\n            {...layout}\n            scrollToFirstError\n        >\n            <Form.Item\n                name=\"login\"\n                label=\"Логин\"\n                tooltip=\"По которому вы будете заходить на сайт\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Логин не может быть пустым',\n                    whitespace: false,\n                },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"name\"\n                label=\"Имя\"\n                tooltip=\"Отображаемое на платформе\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Имя не может быть пустым',\n                    whitespace: false,\n                },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"surname\"\n                label=\"Фамилия\"\n                tooltip=\"Отображаемая на платформе\"\n            >\n                <Input />\n            </Form.Item>\n        </Form>\n        </fieldset>\n    );\n};\n\nexport default Profile;","import { action, extendObservable } from \"mobx\";\nimport HomeScreen from \"../views/HomeScreen\";\nimport Login from \"../views/Login\";\nimport QuestionPage from \"../views/QuestionPage\";\nimport QuestionsScreen from \"../views/QuestionsScreen\";\nimport Registration from \"../views/Registration\";\nimport Profile from \"../views/EditProfile\";\n\nconst SelectedPage = () => {\n    const items = {\n        home: <HomeScreen/>,\n        questions: <QuestionsScreen/>,\n        question: <QuestionPage/>,\n        register: <Registration/>,\n        login: <Login/>,\n        profileEdit: <Profile/>,\n    }\n    const self = {\n    }\n    self.actions = {\n        setSelected: action((page, config = {}) => {\n            self.selected = page;\n            self.actions.setSelectedPageItem(page, config);\n        }),\n        setSelectedPageItem: action((page, config = {})=>{\n            const copy = Object.assign({}, items[page]);\n            copy.props=config;\n            self.selectedPageItem = copy;\n        })\n    }\n    return extendObservable(self, { selected: \"home\", selectedPageItem: items[\"home\"] });\n}\nexport default SelectedPage;","import { action, extendObservable } from \"mobx\";\n\nconst Questions = (connection) => {\n    const self = {\n        isLoading: false,\n        total: 0,\n        questions: [],\n        filters: {},\n        currentPage: 1,\n        pageSize: 25,\n        addFilter(property, value){\n            self.filters[property] = value;\n        },\n        removeFilter(property){\n            if(self.filters[property]) delete self.filters[property];\n        },\n        actions: {\n            setTotal: action(total=>self.total=total),\n            setMessages: action(questions=>self.questions=questions),\n            setLoading: action(isLoading => self.isLoading = isLoading),\n            setIsLoaded: action(isLoaded => self.isLoaded = isLoaded),\n            getQuestions: action(async (page = 1, pageSize = 25, exact=true) => {\n                if(self.isLoading) return;\n                self.actions.setLoading(true);\n                self.currentPage = page;\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/question/${exact?'list':'similar'}`,\n                    params: exact? {...self.filters} : [self.filters.name || '']\n                };\n                requestConfig.params.limit=pageSize;\n                requestConfig.params.offset=pageSize * (page - 1);\n                \n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                if(response.success){\n                    const messages = response.result;\n                    self.actions.setTotal(response.total);\n                    self.actions.setMessages(messages);\n                    self.actions.setIsLoaded(true);\n                }\n                self.actions.setIsLoaded(true);\n                self.actions.setLoading(false);\n            }),\n            createQuestion: action(async (data) => {\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/question/create`,\n                    params: [data]\n                };\n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                return response;\n            }),\n            setQuestionAnswered: action(async (data) => {\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/question/close`,\n                    params: [data.id]\n                };\n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                return response;\n            }),\n            setQuestionClosed: action(async (data) => {\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/question/cancel`,\n                    params: [data.id]\n                };\n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                return response;\n            })\n        }\n    };\n    return extendObservable(self, { questions: [], isLoading: false, isLoaded: false, total: 0});\n}\nexport default Questions;","import { action, extendObservable } from \"mobx\";\n\nconst Answers = (connection) => {\n    const self = {\n        isLoading: false,\n        total: 0,\n        answers: [],\n        filters: {},\n        question: 0,\n        currentPage: 1,\n        pageSize: 25,\n        addFilter(property, value){\n            self.filters[property] = value;\n            if(property===\"question_id\"){\n                self.actions.setQuestion(value);\n                self.actions.setIsLoaded(false);\n            }\n        },\n        removeFilter(property){\n            if(self.filters[property]) delete self.filters[property];\n        },\n        actions: {\n            setTotal: action(total=>self.total=total),\n            setAnswers: action(answers=>self.answers=answers),\n            setQuestion: action(question=>self.question=question),\n            setLoading: action(isLoading => self.isLoading = isLoading),\n            setIsLoaded: action(isLoaded => self.isLoaded = isLoaded),\n            getAnswers: action(async (page = 1, pageSize = 25, exact=true) => {\n                if(self.isLoading) return;\n                self.actions.setLoading(true);\n                self.currentPage = page;\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/answer/list`,\n                    params: {...self.filters}\n                };\n                requestConfig.params.limit=pageSize;\n                requestConfig.params.offset=pageSize * (page - 1);\n                \n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                if(response.success){\n                    const answers = response.result;\n                    self.actions.setTotal(response.total);\n                    self.actions.setAnswers(answers);\n                    self.actions.setIsLoaded(true);\n                }\n                self.actions.setIsLoaded(true);\n                self.actions.setLoading(false);\n            }),\n            createAnswer: action(async (data) => {\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/answer/create`,\n                    params: [data]\n                };\n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                return response;\n            }),\n        }\n    };\n    return extendObservable(self, { answers: [], isLoading: false, isLoaded: false, total: 0, question: 0});\n}\nexport default Answers;","import { action, extendObservable } from \"mobx\";\n\nconst User = (connection) => {\n    const self = {\n        nickname: null,\n        isLoggedIn: false,\n        setUserData: (data) => {\n            self.actions.setAvatar(data.avatar || \"https://via.placeholder.com/150\");\n            self.actions.setUserId(data.id);\n            self.actions.setNickname(data.login);\n            self.info = data;\n        }\n    }\n    self.actions = {\n        setNickname: action(nickname => self.nickname = nickname),\n        setIsLoggedIn: action(value => self.isLoggedIn = value),\n        setAvatar: action(avatar => self.avatar = avatar),\n        setUserId: action(user_id => self.user_id = user_id),\n        isLoggedIn: action(async ()=>{\n            const response = await connection.request({\n                params:[connection.getSession()?.split('=')[1] || ''],\n                url: 'https://uchi-hack.herokuapp.com/user/isLoggedIn'\n            })\n            const json = await response.json();\n            const data = json.result;\n            if(!json.success){\n                throw new Error(data.error_message)\n            }\n            if(data.length){\n                self.setUserData(data[0]);\n                self.actions.setIsLoggedIn(true);\n            }\n        }),\n        login: action(async (login, password)=>{\n            const response = await connection.request({\n                params:{\n                    login, password\n                },\n                url: 'https://uchi-hack.herokuapp.com/user/login'\n            })\n            const json = await response.json();\n            const data = json.result;\n            if(!json.success){\n                throw new Error(data.error_message)\n            }\n            connection.setSession(data.session_id);\n            self.setUserData(data);\n            self.actions.setIsLoggedIn(true);\n        }),\n        logout: action(async () => {\n            const response = await connection.request({\n                params:[\"\"],\n                url: 'https://uchi-hack.herokuapp.com/user/logout'\n            })\n            const json = await response.json();\n            const data = json.result;\n            if(!json.success){\n                throw new Error(data.error_message)\n            }\n            connection.setSession('');\n            self.setUserData({});\n            self.actions.setIsLoggedIn(false);\n        })\n        \n    }\n    return extendObservable(self, { nickname: null, isLoggedIn: false });\n}\nexport default User;","const treefiy = (dataArray, parentId = \"parent_id\") => {\n    const data = [];\n    const byIdMap = {};\n    dataArray.forEach(elem => {\n        byIdMap[elem.id] = elem\n    });\n    dataArray.forEach(elem=>{\n        elem.title = elem.name;\n        elem.value = elem.id;\n        if(!elem[parentId]) {\n            data.push(elem);\n        } else {\n            const parent = byIdMap[elem[parentId]];\n            if(!parent.children) parent.children = [];\n            parent.children.push(elem);\n        }\n    });\n    return data;\n}\n\nexport default treefiy;","import { action, extendObservable } from \"mobx\";\nimport treefiy from \"../utils/Tree\";\n\nconst Categories = (connection) => {\n    const self = {\n        isLoading: false,\n        isLoaded: false,\n        categories: [],\n        actions: {\n            setTotal: action(total=>self.total=total),\n            setCategories: action(categories=>self.categories=categories),\n            setLoading: action(isLoading => self.isLoading = isLoading),\n            setIsLoaded: action(isLoaded => self.isLoaded = isLoaded),\n            getCategories: action(async (page = 1, pageSize = 25) => {\n                if(self.isLoading) return;\n                self.actions.setLoading(true);\n                self.currentPage = page;\n                const requestConfig = {\n                    url: `https://uchi-hack.herokuapp.com/category/list`,\n                    params: {}\n                };\n                requestConfig.params.limit=pageSize;\n                requestConfig.params.offset=pageSize * (page - 1);\n                \n                const responseObject = await connection.request(requestConfig);\n                const response = await responseObject.json();\n                if(response.success){\n                    const categories = treefiy(response.result);\n                    self.actions.setTotal(response.total);\n                    self.actions.setCategories(categories);\n                    self.actions.setIsLoaded(true);\n                }\n                self.actions.setIsLoaded(true);\n                self.actions.setLoading(false);\n            }),\n        }\n    };\n    return extendObservable(self, { categories: [], isLoading: false, isLoaded: false, total: 0});\n}\nexport default Categories;","import Connection from \"../utils/Connection\"\nimport { action, extendObservable } from \"mobx\";\nimport SelectedPage from \"./SelectedPage\";\nimport Questions from \"./Questions\";\nimport Answers from \"./Answers\";\nimport React from \"react\";\nimport User from \"./User\";\nimport Categories from \"./Categories\";\n\nconst RegistryCtx = React.createContext();\n\nfunction Registry(){\n    const self = {\n        initialized: false,\n        getStore(storeName){\n            if(self.stores && self.stores[storeName]){\n                return self.stores[storeName]\n            } else {\n                throw new Error(`No store with name ${storeName} was found`);\n            }\n        }\n    };\n    self.actions = {\n        init: action(() => {\n            self.connection = Connection().init();\n            self.stores = {\n                selectedPage: SelectedPage(),\n                user: User(self.connection),\n                categories: Categories(self.connection),\n                questions: Questions(self.connection),\n                answers: Answers(self.connection)\n            };\n            self.initialized = true;\n        })\n    }\n\n    return extendObservable(self, { stores: [], initialized: false });\n}\n\nexport {Registry as default, RegistryCtx}","import { Menu } from 'antd';\nimport { observer } from \"mobx-react\";\n\nconst { SubMenu } = Menu;\n\nconst Header = observer(({store}) => {\n    const pageStore = store.getStore('selectedPage');\n    const userInfo = store.getStore('user');\n    \n    const keysForGuests = ['home', 'questions', 'login', 'register'];\n    const keysForUsers = ['home', 'questions', 'avatar', 'profile',];\n    const keys = userInfo.isLoggedIn ? keysForUsers : keysForGuests;\n    const menuItems = {\n        home: \n            <Menu.Item key=\"home\">\n                Домашняя страница\n            </Menu.Item>,\n        questions: \n            <Menu.Item key=\"questions\">\n                Вопросы\n            </Menu.Item>,\n        avatar: \n            <Menu.Item disabled=\"true\"  style={{padding:0}} key=\"avatar\">\n                <img src={userInfo.avatar} alt=\"avatar\" style={{maxWidth:'50px', maxHeight:'50px'}}/>\n            </Menu.Item>,\n        profile:\n            <SubMenu key=\"SubMenu\" title={userInfo.nickname} key=\"profile\">\n                <Menu.Item key=\"profileEdit\">Редактировать профиль</Menu.Item>\n                <Menu.Item key=\"exit\">Выход</Menu.Item>\n            </SubMenu>,\n        login:\n            <Menu.Item key=\"login\">\n                Логин\n            </Menu.Item>,\n        register:\n            <Menu.Item key=\"register\">\n                Регистрация\n            </Menu.Item>\n    }\n    const elems = [];\n    keys.forEach(elem=>{\n        elems.push(menuItems[elem]);\n    })\n    return (\n        <header>\n            <h1>МВО #25</h1>\n            <Menu \n                onClick={(e)=>{\n                    const key = e.key;\n                    if(key === 'exit'){\n                        userInfo.actions.logout();\n                        return;\n                    }\n                    if(key === 'profileEdit'){\n                        pageStore.actions.setSelected(e.key, {record:userInfo.info});\n                        return;\n                    }\n                    pageStore.actions.setSelected(e.key);\n                }} \n                selectedKeys={[pageStore.selected]} \n                mode=\"horizontal\"\n                style={{display:'block', position:'sticky',top:'0',textAlign:'right'}}\n            >\n                {elems}\n            </Menu>\n        </header>\n    )\n});\n\nexport default Header;","import \"./App.scss\";\nimport Registry, {RegistryCtx} from \"../stores/Registry\";\nimport React from 'react';\nimport Header from \"./Header\";\nimport { observer } from \"mobx-react\";\n\n\nconst registry = Registry();\nregistry.actions.init();\nregistry.getStore('user').actions.isLoggedIn();\n\nconst App = observer(() => {\n  const selectedPageStore = registry.getStore('selectedPage');\n  return (\n    <RegistryCtx.Provider value={registry}>\n      <div className=\"App\">\n        <RegistryCtx.Consumer>\n          {store =><Header store={store}/>}\n        </RegistryCtx.Consumer>\n        <main>\n          {selectedPageStore.selectedPageItem}\n        </main>\n      </div>\n    </RegistryCtx.Provider>\n  );\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}